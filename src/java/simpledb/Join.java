package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private OpIterator child1;
    private OpIterator child2;
    private JoinPredicate p;
    private Tuple next;
    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.child1 = child1;
        this.child2 = child2;
        this.p = p;
        this.next = null;
    }

    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        int number = p.getField1();
        TupleDesc t  = child1.getTupleDesc();
        String name = t.getFieldName(number);
        return name;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        int number = p.getField1();
        TupleDesc t  = child2.getTupleDesc();
        String name = t.getFieldName(number);
        return name;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        this.child1.open();
        this.child2.open();
        this.next = null;
    }

    public void close() {
        super.close();
        this.child1.close();
        this.child2.close();
        this.next = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.child1.rewind();
        this.child2.rewind();
        this.next = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        boolean found = false;
        if(next == null && child1.hasNext()) {
            next = child1.next();
        }
        while(!found) {
            if(!child2.hasNext()) {
                child2.rewind();
                if(child1.hasNext()) {
                    next = child1.next();
                } else {
                    return null;
                }
            }
            Tuple secondTuple = child2.next();
            if(p.filter(next, secondTuple)) {
                TupleDesc combined = this.getTupleDesc();
                Tuple tuple = new Tuple(combined);
                int index = 0;
                for(int i = 0; i < next.listOfItems.size(); i++) {
                    tuple.setField(index++, next.getField(i));
                }
                for(int j = 0; j < secondTuple.listOfItems.size(); j++) {
                    tuple.setField(index++, secondTuple.getField(j));
                }
                return tuple;
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if(this.child1 != children[0]) {
            this.child1 = children[0];
        }
        if (this.child2 != children[1]) {
            this.child2 = children[1];
        }
    }

}
